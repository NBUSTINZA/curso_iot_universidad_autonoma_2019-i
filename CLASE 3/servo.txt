/*
 Basic ESP8266 MQTT example

 This sketch demonstrates the capabilities of the pubsub library in combination
 with the ESP8266 board/library.

 It connects to an MQTT server then:
  - publishes "hello world" to the topic "outTopic" every two seconds
  - subscribes to the topic "inTopic", printing out any messages
    it receives. NB - it assumes the received payloads are strings not binary
  - If the first character of the topic "inTopic" is an 1, switch ON the ESP Led,
    else switch it off

 It will reconnect to the server if the connection is lost using a blocking
 reconnect function. See the 'mqtt_reconnect_nonblocking' example for how to
 achieve the same result without blocking the main loop.

 To install the ESP8266 board, (using Arduino 1.6.4+):
  - Add the following 3rd party board manager under "File -> Preferences -> Additional Boards Manager URLs":
       http://arduino.esp8266.com/stable/package_esp8266com_index.json
  - Open the "Tools -> Board -> Board Manager" and click install for the ESP8266"
  - Select your ESP8266 in "Tools -> Board"

*/
#include <SimpleDHT.h>
#include <ESP8266WiFi.h>   //conectividad basica de wifi
#include <PubSubClient.h>  //mqtt
#include <Servo.h> 



Servo myservo;  // create servo object to control a servo 
  // create servo object to control a servo 
                // twelve servo objects can be created on most boards
                 // twelve servo objects can be created on most boards
 

int pin_servo = 12;  //pin D6 para nodemcu
// Update these with values suitable for your network.

// configurar conexion hacia la red wifi

// for DHT11, 
//      VCC: 5V or 3V
//      GND: GND
//      DATA: 2
int pinDHT11 = 14;
SimpleDHT11 dht11;
float temp;
float hum;


const char* ssid = "HUAWEI-73ED";
const char* password = "04592945";
const char* mqtt_server = "broker.shiftr.io";  //broker pc (ip de mi 
                                          //computador que tiene instalado mosquitto broker mqtt 


///////////////////////AUTENTICACION BROKER MQTT///////////////////////////////////////////
const char clientID[]="NODEMCU-MARKO";  //identificador unico de para cada dispositivo iot
const char username[]="marko_esp8266";       //usuario configurado en broker
const char passwords[]="123456789";      //contraseña usuario broker
const char willTopic[]= "";
int willQoS=0 ;                             //0-1-2
int  willRetain=0 ;                         //0-1  //si se activa o no la retencion de data
const char willMessage[]="";    //mensaje cuando device este desconectado de broker
////////////////////////////////////////////////////////////////////////////////////////////////


WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int value = 0;

String string_payload;  //variable para que almacene informacion que llega a la nodemcu
char c;


void sensor_dht()
{
   // start working...
  Serial.println("=================================");
  Serial.println("Sample DHT11...");
  
  // read without samples.
  byte temperature = 0;
  byte humidity = 0;
  int err = SimpleDHTErrSuccess;
  if ((err = dht11.read(pinDHT11, &temperature, &humidity, NULL)) != SimpleDHTErrSuccess) {
    Serial.print("Read DHT11 failed, err="); Serial.println(err);delay(1000);
    return;
  }
  
  Serial.print("Sample OK: ");
  Serial.print((int)temperature); Serial.print(" *C, "); 
  Serial.print((int)humidity); Serial.println(" H");

  temp = (int)temperature;
  hum = (int)humidity;
  
  // DHT11 sampling rate is 1HZ.
  //delay(1500);
}
 
void setup() {
  myservo.attach(pin_servo);  // attaches the servo on GIO2 to the servo object 

  pinMode(D4, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);   //comunicacion serie arduino-pc
  setup_wifi(); //funcion para conectar a red wifi
  client.setServer(mqtt_server, 1883);  //inicia conexion a broker
  client.setCallback(callback); //funcion para recibir mensaje 
}

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}


void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  
  /////////////////////////////
  String string_topic=String(topic); //almaceno el nombre del topico del cual recibo informacion
  string_payload="";
  /////////////////////////////
  
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    c=payload[i];
    string_payload+=c;
  }
  Serial.println();  
  Serial.println(string_payload); //mensaje convertido a string

  //toma de desiciones
  if(string_topic=="servo")
  {
      Serial.print("este es un mensaje de servo: ");
      Serial.println(string_payload); 
      int pos_serv = string_payload.toInt() ; 
       myservo.write(pos_serv);              // tell servo to go to position in variable 'pos'  
  }
  if(string_topic=="rele")
  {
      Serial.print("este es un mensaje de rele: ");
      Serial.println(string_payload);  
  }
   if(string_topic=="led")
  {
      Serial.print("este es un mensaje de lede: ");
      if(string_payload=="1"){
        digitalWrite(D4,HIGH);
        Serial.print(string_payload);
      }else{
        digitalWrite(D4,LOW);
        Serial.println(string_payload);
      }
  }
  
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    //if (client.connect("ESP8266Client")) {
  if(client.connect(clientID,username,passwords,willTopic,willQoS,willRetain,willMessage)){    
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("outTopic", "hello world");
      // ... and resubscribe
      ////NOS SUSCRIBIMOS A LOS TOPICOS QUE QUEREMOS 
      //RECIBIR INFORMACION
      client.subscribe("inTopic");
      client.subscribe("rele");
      client.subscribe("servo");
      client.subscribe("led");
      
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}



void loop() {

  if (!client.connected()) {
    reconnect();
  }

  
  client.loop(); //funcion que verificar que mensajes lleguen al nodemcu

  long now = millis();
  if (now - lastMsg > 2000) { //cada 2 segundos
    lastMsg = now;
    ++value;

     sensor_dht();  //lectura del sensor dht
    //lectura de sensor////////////////////////////////////////////////////
    float tempe = temp  ; //random(20, 25); //simulamos que leemos el dato de un sensor
    float hume = hum  ; //random(80,98);   
  /////////////////////////////////////////////////////////////////////////
    
    char sense[]=""; //almacenar dato en char array
 
    String my_payload=String(temp); //convierto luego a string
    my_payload.toCharArray(sense, (my_payload.length() + 1)); //luego convierto a char array 
 
    client.publish("temperatura", sense); //siempre recibe un char array 
    Serial.println(sense);
    //////////////////////////////////////////////////////////////////////
    my_payload=String(hum); //convierto luego a string
    my_payload.toCharArray(sense, (my_payload.length() + 1)); //luego convierto a char array 
 
    client.publish("humedad", sense); //siempre recibe un char array 
    Serial.println(sense);
  }
}

