/*
 Basic ESP8266 MQTT example

 This sketch demonstrates the capabilities of the pubsub library in combination
 with the ESP8266 board/library.

 It connects to an MQTT server then:
  - publishes "hello world" to the topic "outTopic" every two seconds
  - subscribes to the topic "inTopic", printing out any messages
    it receives. NB - it assumes the received payloads are strings not binary
  - If the first character of the topic "inTopic" is an 1, switch ON the ESP Led,
    else switch it off

 It will reconnect to the server if the connection is lost using a blocking
 reconnect function. See the 'mqtt_reconnect_nonblocking' example for how to
 achieve the same result without blocking the main loop.

 To install the ESP8266 board, (using Arduino 1.6.4+):
  - Add the following 3rd party board manager under "File -> Preferences -> Additional Boards Manager URLs":
       http://arduino.esp8266.com/stable/package_esp8266com_index.json
  - Open the "Tools -> Board -> Board Manager" and click install for the ESP8266"
  - Select your ESP8266 in "Tools -> Board"

*/


#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Servo.h> 

///////////////////Apartado para servomotor///////
Servo myservo;  // create servo object to control a servo 
                // twelve servo objects can be created on most boards
int pin_servo=13; ///pin gpio (D7)del la nodemcu
int pos=0;
/////////////////////////////////////////////////
/////////////////////////////////////////////////////////
#include <SimpleDHT.h>

// for DHT11, 
//      VCC: 5V or 3V
//      GND: GND
//      DATA: 2
int pinDHT11 = 14;
SimpleDHT11 dht11;
/////////////////////////////////////////////////////////


// Update these with values suitable for your network.

const char* ssid = "HUAWEI-73ED";
const char* password = "04592945";
const char* mqtt_server = "broker.shiftr.io";


///////////////////////AUTENTICACION BROKER MQTT///////////////////////////////////////////
const char clientID[]="NODEMCU-MARKO";  //identificador unico de para cada dispositivo iot
const char username[]="nodemcu-antonio";       //usuario configurado en broker
const char passwords[]="123456789";      //contraseña usuario broker
const char willTopic[]= "";
int willQoS=0;                             //0-1-2
int  willRetain=0 ;                         //0-1  //si se activa o no la retencion de data
const char willMessage[]="";    //mensaje cuando device este desconectado de broker
////////////////////////////////////////////////////////////////////////////////////////////////

/////variables adicionales//////////////////////////////////
float temperatura=0;
float humedad=0;

char c;  //variable para contener carcateres del payload 
String readString=""; 
////////////////////////////////////////////////////////////
WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int value = 0;

void dht(){

   // start working...
  Serial.println("=================================");
  Serial.println("Sample DHT11...");
  
  // read without samples.
  byte temperature = 0;
  byte humidity = 0;
  int err = SimpleDHTErrSuccess;
  if ((err = dht11.read(pinDHT11, &temperature, &humidity, NULL)) != SimpleDHTErrSuccess) {
    Serial.print("Read DHT11 failed, err="); Serial.println(err);delay(1000);
    return;
  }
  
  Serial.print("Sample OK: ");
  Serial.print((int)temperature); Serial.print(" *C, "); 
  Serial.print((int)humidity); Serial.println(" H");

  temperatura=(float)temperature;
  humedad=(float)humidity;
  
  // DHT11 sampling rate is 1HZ.
 // delay(1500);
  
}


void setup() {
  myservo.attach(pin_servo);  // attaches the servo on GIO2 to the servo object 
  pinMode(D6,OUTPUT);
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  
  /////////////////////////////
  String string_topic;
  string_topic=String(topic); //almaceno el nombre del topico del cual recibo informacion
  readString="";
  /////////////////////////////
  
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    c=payload[i];
    readString+=c;
  }

  //tenemos almacenado nombre del topico(string_topic), y tenemos almacenado el payload(readString)
  Serial.print(" topico:");
  Serial.print(string_topic);
  Serial.print(" ");
  Serial.print(" payload:");
  Serial.println(readString);

if(string_topic=="digital"){

  if(readString== "1"){
    digitalWrite(D6,HIGH);
  }
  if(readString== "0"){
    digitalWrite(D6,LOW);
  }  
}

if(string_topic=="servomotor")
{
  pos=readString.toInt();
  Serial.print("Posicion Servomoto: ");
  Serial.println(pos);
}
  
  
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
  
   if(client.connect(clientID,username,passwords,willTopic,willQoS,willRetain,willMessage)){ 
       Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("inTopic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}


void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    
    char sense[]=""; //almacenar dato en char array
    dht();

    
    String my_payload=String(temperatura); //convierto luego a string
    my_payload.toCharArray(sense, (my_payload.length() + 1)); //luego convierto a char array 
    client.publish("temperatura", sense); //siempre recibe un char array 
    Serial.println(sense);

    my_payload=String(humedad); //convierto luego a string
    my_payload.toCharArray(sense, (my_payload.length() + 1)); //luego convierto a char array 
    client.publish("humedad", sense); //siempre recibe un char array 
    Serial.println(sense);

    //myservo.write(pos);              // tell servo to go to position in variable 'pos' 
    
   client.subscribe("digital");
   client.subscribe("servomotor");
    
  }

   myservo.write(pos);              // tell servo to go to position in variable 'pos'   
}



